;;; im-char-picker.el --- char picker  -*- lexical-binding: t; -*-

;; Copyright (C) 2025 Isa Mert Gurbuz

;; Author: Isa Mert Gurbuz <isamertgurbuz@gmail.com>
;; URL: https://github.com/isamert/dotfiles
;; Version: 0.0.1
;; Package-Requires: ((emacs "25.2"))
;; Keywords: utf-8

;; This file is not part of GNU Emacs.

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;; Mostly generated by an LLM.

;;; Code:

(defun im-char-picker ()
  "Prompt for a useful UTF-8 character (with keywords) and insert it at point.
Covers programming, math, text, currency, and box drawing symbols."
  (interactive)
  (let* ((utf8-chars
          '(;; Programming and Math
            ("Programming: λ (lambda, function, calculus)" . "λ")
            ("Programming: Λ (capital lambda, Lambda, type, logic)" . "Λ")
            ("Programming: ← (left arrow, assign, set)" . "←")
            ("Programming: → (right arrow, mapping, lambda, function)" . "→")
            ("Programming: ⇒ (double arrow, implies, logical)" . "⇒")
            ("Programming: ⇐ (double left arrow, reverse implies)" . "⇐")
            ("Programming: ↔ (leftright arrow, iff, bi-implication)" . "↔")
            ("Programming: ⟶ (long right arrow, yields, function)" . "⟶")
            ("Programming: ⟹ (long double arrow, yields, logic)" . "⟹")
            ("Programming: ⋅ (dot, multiplication, operator)" . "⋅")
            ("Programming: ≠ (not equal, inequality)" . "≠")
            ("Programming: ≡ (identical, congruent, triple equal)" . "≡")
            ("Programming: ≤ (less or equal, leq)" . "≤")
            ("Programming: ≥ (greater or equal, geq)" . "≥")
            ("Programming: ⊂ (subset, set theory)" . "⊂")
            ("Programming: ⊆ (subseteq, subset equal, set theory)" . "⊆")
            ("Programming: ⊃ (superset, set theory)" . "⊃")
            ("Programming: ⊇ (supseteq, superset equal, set theory)" . "⊇")
            ("Programming: ∧ (and, logical and, predicate)" . "∧")
            ("Programming: ∨ (or, logical or, predicate)" . "∨")
            ("Programming: ¬ (not, logical not, negation)" . "¬")
            ("Programming: ∑ (sum, summation, sigma, big sum)" . "∑")
            ("Programming: ∏ (product, pi, big product)" . "∏")
            ("Programming: ∫ (integral, calculus, int)" . "∫")
            ("Programming: ∇ (nabla, gradient, div, grad, del)" . "∇")
            ("Programming: ∂ (partial, partial derivative)" . "∂")
            ("Programming: ∈ (in, element, set membership)" . "∈")
            ("Programming: ∉ (not in, not element of, set)" . "∉")
            ("Programming: ∃ (exists, existential)" . "∃")
            ("Programming: ∀ (forall, universal quantifier)" . "∀")
            ("Programming: ∅ (empty set, null set)" . "∅")
            ("Programming: ∘ (compose, composition, circle)" . "∘")
            ("Programming: ∞ (infinity, infinite)" . "∞")
            ("Programming: √ (square root, radical)" . "√")
            ("Programming: ∛ (cube root, radical)" . "∛")
            ("Programming: ∜ (fourth root, radical)" . "∜")
            ("Programming: ∝ (proportional to)" . "∝")
            ("Programming: ∠ (angle, geometry)" . "∠")
            ("Programming: ⊥ (perpendicular, orthogonal)" . "⊥")
            ("Programming: ∥ (parallel, line, geometry)" . "∥")
            ("Programming: ∇ (nabla, del, grad)" . "∇")
            ("Programming: ∞ (infinity, math)" . "∞")
            ("Programming: ℕ (natural numbers, N, naturals)" . "ℕ")
            ("Programming: ℤ (integers, Z, whole numbers)" . "ℤ")
            ("Programming: ℚ (rationals, Q)" . "ℚ")
            ("Programming: ℝ (reals, R)" . "ℝ")
            ("Programming: ℂ (complex, C)" . "ℂ")
            ("Programming: ∎ (QED, end of proof)" . "∎")

            ;; More arrows (special)
            ("Arrow: ↦ (maps to, function)" . "↦")
            ("Arrow: ⇨ (bold right arrow, leads to, points)" . "⇨")
            ("Arrow: ↗ (arrow northeast, up-right)" . "↗")
            ("Arrow: ↘ (arrow southeast, down-right)" . "↘")
            ("Arrow: ↙ (arrow southwest, down-left)" . "↙")
            ("Arrow: ↖ (arrow northwest, up-left)" . "↖")
            ("Arrow: ↑ (up arrow, direction, caret)" . "↑")
            ("Arrow: ↓ (down arrow, direction, caret)" . "↓")
            ("Arrow: ⇑ (double up arrow)" . "⇑")
            ("Arrow: ⇓ (double down arrow)" . "⇓")
            ("Arrow: ↩ (return arrow, enter)" . "↩")

            ;; Text (typography)
            ("Text: … (ellipsis, three dots, more)" . "…")
            ("Text: · (middle dot, interpunct, list)" . "·")
            ("Text: • (bullet, list item, circle)" . "•")
            ("Text: ° (degree, angle)" . "°")
            ("Text: † (dagger, footnote, reference)" . "†")
            ("Text: ‡ (double dagger, footnote, reference)" . "‡")
            ("Text: — (em dash, long dash, break, pause)" . "—")
            ("Text: – (en dash, short dash, range)" . "–")
            ("Text: “ (double quote open, left, curly)" . "“")
            ("Text: ” (double quote close, right, curly)" . "”")
            ("Text: ‘ (single quote open, left, curly)" . "‘")
            ("Text: ’ (single quote close, right, curly, apostrophe)" . "’")
            ("Text: „ (low double quote, left, german)" . "„")
            ("Text: « (guillemets, angle quote left, french quote)" . "«")
            ("Text: » (guillemets, angle quote right, french quote)" . "»")
            ("Text: ‹ (single guillemet left)" . "‹")
            ("Text: › (single guillemet right)" . "›")
            ("Text: ′ (prime, feet, minutes)" . "′")
            ("Text: ″ (double prime, inches, seconds)" . "″")
            ("Text: § (section, paragraph, legal)" . "§")
            ("Text: ¶ (pilcrow, paragraph mark)" . "¶")
            ("Text: @ (at, at symbol, email)" . "@")

            ;; Currency
            ("Currency: $ (dollar, USD)" . "$")
            ("Currency: ₺ (Turkish lira, TL, TRY)" . "₺")
            ("Currency: € (euro, EUR)" . "€")
            ("Currency: £ (pound sterling, GBP)" . "£")
            ("Currency: ¥ (yen, yuan, JPY, CNY)" . "¥")
            ("Currency: ₪ (shekel, NIS, Israel)" . "₪")
            ("Currency: ₽ (ruble, Russia)" . "₽")
            ("Currency: ₩ (won, Korea)" . "₩")
            ("Currency: ₫ (dong, VND, Vietnam)" . "₫")
            ("Currency: ₹ (rupee, INR, India)" . "₹")
            ("Currency: ₱ (peso, PHP, Philippines)" . "₱")
            ("Currency: ¢ (cent, currency)" . "¢")

            ;; Box Drawing (single line)
            ("Box: ─ (horizontal line single)" . "─")
            ("Box: │ (vertical line single)" . "│")
            ("Box: ┌ (down and right corner single)" . "┌")
            ("Box: ┐ (down and left corner single)" . "┐")
            ("Box: └ (up and right corner single)" . "└")
            ("Box: ┘ (up and left corner single)" . "┘")
            ("Box: ├ (vertical right tee single)" . "├")
            ("Box: ┤ (vertical left tee single)" . "┤")
            ("Box: ┬ (horizontal down tee single)" . "┬")
            ("Box: ┴ (horizontal up tee single)" . "┴")
            ("Box: ┼ (cross, plus, intersection single)" . "┼")

            ;; Box Drawing (double line)
            ("Box: ═ (horizontal line double)" . "═")
            ("Box: ║ (vertical line double)" . "║")
            ("Box: ╔ (down and right corner double)" . "╔")
            ("Box: ╗ (down and left corner double)" . "╗")
            ("Box: ╚ (up and right corner double)" . "╚")
            ("Box: ╝ (up and left corner double)" . "╝")
            ("Box: ╠ (vertical right tee double)" . "╠")
            ("Box: ╣ (vertical left tee double)" . "╣")
            ("Box: ╦ (horizontal down tee double)" . "╦")
            ("Box: ╩ (horizontal up tee double)" . "╩")
            ("Box: ╬ (cross, plus, intersection double)" . "╬")
            ;; Mixed box drawing for further use
            ("Box: ╞ (left tee, mixed, single/double)" . "╞")
            ("Box: ╡ (right tee, mixed, single/double)" . "╡")
            ("Box: ╥ (up tee, mixed, single/double)" . "╥")
            ("Box: ╨ (down tee, mixed, single/double)" . "╨")
            ("Box: ╪ (plus, mixed, single/double)" . "╪")

            ;; Checkboxes and marks
            ("Other: ☑ (checkbox checked, done, todo)" . "☑")
            ("Other: ☐ (checkbox empty, task, todo)" . "☐")
            ("Other: ✓ (checkmark, yes, correct)" . "✓")
            ("Other: ✔ (checkmark thick, done)" . "✔")
            ("Other: ✗ (crossmark, x, no, incorrect)" . "✗")
            ("Other: ✘ (crossmark thick, no)" . "✘")

            ("Emoji: 😀 (grinning, smile, happy, face)" . "😀")
            ("Emoji: 😅 (sweat smile, relief, face)" . "😅")
            ("Emoji: 😂 (joy, tears, laugh, face)" . "😂")
            ("Emoji: 😉 (wink, playful, face)" . "😉")
            ("Emoji: 😊 (blush, smile, proud, face)" . "😊")
            ("Emoji: 😍 (love, heart eyes, smile, face)" . "😍")
            ("Emoji: 😎 (cool, sunglasses, face)" . "😎")
            ("Emoji: 😢 (cry, sad, tears, face)" . "😢")
            ("Emoji: 😡 (angry, mad, face)" . "😡")
            ("Emoji: 😱 (scream, shock, fright, face)" . "😱")
            ("Emoji: 🤔 (think, pondering, face)" . "🤔")
            ("Emoji: 🙏 (pray, thanks, hands)" . "🙏")
            ("Emoji: 👍 (thumbs up, yes, approve)" . "👍")
            ("Emoji: 👎 (thumbs down, no, disapprove)" . "👎")
            ("Emoji: 👌 (ok, okay, good, hand)" . "👌")
            ("Emoji: ✌ (victory, peace, hand)" . "✌")
            ("Emoji: 👏 (clap, clapping, applause)" . "👏")
            ("Emoji: 👀 (eyes, look, watch, see)" . "👀")
            ("Emoji: 💡 (light, idea, bulb)" . "💡")
            ("Emoji: 🔥 (fire, lit, hot)" . "🔥")
            ("Emoji: 🚀 (rocket, launch, startup)" . "🚀")
            ("Emoji: 🏆 (trophy, award, win)" . "🏆")
            ("Emoji: ❤️ (heart, love, like)" . "❤️")
            ("Emoji: 💔 (broken heart, breakup, sad)" . "💔")
            ("Emoji: ⭐ (star, favorite, rating)" . "⭐")
            ("Emoji: 💯 (100, success, perfect, score)" . "💯")
            ("Emoji: 🎉 (tada, celebration, party, congrats)" . "🎉")
            ("Emoji: 💤 (zzz, sleep, tired)" . "💤")
            ("Emoji: ⚡ (zap, lightning, electric, fast, quick)" . "⚡")
            ("Emoji: ⏰ (alarm, clock, time, reminder)" . "⏰")

            ;; Miscellaneous
            ("Other: ☕ (coffee, java, break)" . "☕")
            ("Other: ⚠ (warning, caution)" . "⚠")
            ("Other: ☀ (sun, weather, day)" . "☀")
            ("Other: ☂ (umbrella, rain, weather)" . "☂")
            ("Other: ★ (star, favorite, rating)" . "★")
            ("Other: ☆ (star hollow, rating)" . "☆")
            ("Other: ☎ (phone, call, contact)" . "☎")
            ("Other: ✉ (envelope, mail, email)" . "✉")
            ("Other: ☼ (sun, bright, weather)" . "☼")
            ("Other: ♥ (heart, love, like)" . "♥")
            ("Other: ♠ (spade, card, game)" . "♠")
            ("Other: ♣ (club, card, game)" . "♣")
            ("Other: ♦ (diamond, card, game)" . "♦")
            ("Other: ♡ (heart hollow, love)" . "♡")))
         (choice (completing-read "Insert UTF-8 char: " (mapcar #'car utf8-chars))))
    (insert (cdr (assoc choice utf8-chars)))))

;;;  im-char-picker.el ends here
